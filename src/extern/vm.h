/**************************************
 * 
 * EXTERNAL VM HEADER
 * 
 **************************************/

#ifndef VM_H_
#define VM_H_

#include <malloc.h>
#include <inttypes.h>
#include <stdbool.h>

#include "var.h"
#include "compslerr.h"

#define VM_STACK_SIZE 256
#define VM_MAX_GVARS 256
#define VM_NATIVEFN_INIT_SIZE 64

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _nativeFN_t
{
        char *name; // name of this function
        intfloat (*func)(var *); // pointer the function to call
        
        bool isVoid; //true iff function does not return a value
        bool retFloat; // true iff the return type is a float
        
        var *params; // the list of paramaters to pass to it
        uint8_t *paramFlags;// OR together the apropriat flags ex float array = FLOAT_VAR | IS_ARRAY
        uint8_t numParam; // how many paramaters to pass it
} nativeFN;

typedef struct _VM_t
{
    nativeFN *natives; // native function table
    uint16_t ncnt; // number of native functions
    
    varTable vt;
    
    COMPSL_ERROR errorno; // holds the error code of the last error generated by this VM
} VM;

VM *createVM(void);
void destroyVM(VM *vm);

//NOTE: the string of the name of new vars is copyed and the copy is retained by the VM
//      for the purpose of identifying the variable. Same goes for native functions.
int32_t *vm_addInt(VM *vm, const char *name);
float *vm_addFloat(VM *vm, const char *name);// add a float to the vm's global vars, and return a pointer to it

float *vm_getFloat(VM *vm, const char *name);
int32_t *vm_getInt(VM *vm, const char *name);

/** add a native function to this vm, return true on success false otherwise
 * sets errno on fail
 */
typedef struct native_param_t
{
	bool isFloat;
	bool isArray;
} nativeParam;
//bool addFunc(VM *vm, intfloat (*func)(var *), const char *name, nativeParam *params, uint16_t numParam); //TODO work out how to spec params
/**
 * add a native function to this vm, return true on success false otherwise
 * sets errno on fail
 * 
 * vm the vm to add to
 * func the function to call
 * retFloat true if the function returns a float, false if it returns an int
 * name the name of the function
 * params a list of types in formate:
 * 		<base type>([])
 * ex int array: int[]
 * ex int:		int
 * ex two ints and a float array: int int float[]
 */
bool addFunc(VM *vm, intfloat (*func)(var *), const char *name, const char *params, bool retFloat, bool isVoid);

#ifdef __cplusplus
}
#endif

#endif /*VM_H_*/
