NOOP: {0,0,NORMAL_BC}: do nothing
# stack operations 
PUSH: {0,1,PUSH_BC}: push local var
PSHT: {0,1,PUSH_BC}: push temp register
APUSH: {1,1,PUSH_BC}: push element from local array (index on stack)
CPUSH: {0,1,PUSH_BC}: push constant
#PUSHI: {0,1,PUSH_BC}: push immediate (ish)
GPSH: {0,1,PUSH_BC}: same as PUSH but for global
GAPS: {1,1,PUSH_BC}: samp as APUSH but for global

POP: {1,0,POP_BC}: pop to local var
POPT: {1,0,POP_BC}: pop to local temp register
APOP: {2,0,POP_BC}: pop into local array (index on top of stack, value is next)
DPOP: {1,0,POP_BC}: pop and discard value
GPOP: {1,0,POP_BC}: same as POP but for global
GAPP: {2,0,POP_BC}: same as APOP but for global

DUP: {1,2,OTHER_BC}: duplicate top of stack

CALL: {0,1,CALL_BC}: call native (native ID in a1, args on stack, ltr w/rightmost @ top)
# arithmetic
ADD: {2,1,ARITH_BC}: add top 2 stack elements (integer)
SUB: {2,1,ARITH_BC}: subtract top 2 stack elements b = pop; a = pop; push a - b;
MUL: {2,1,ARITH_BC}: multiply top 2 stack elements 
DIV: {2,1,ARITH_BC}: divide top 2 stack elements b = pop; a = pop; push a / b;
LE: {2,1,ARITH_BC}: <=
LS: {2,1,ARITH_BC}: <
EQ: {2,1,ARITH_BC}: ==
NE: {2,1,ARITH_BC}: !=
GR: {2,1,ARITH_BC}: >
GE: {2,1,ARITH_BC}: >=
MOD: {2,1,ARITH_BC}: modulus of top 2 stack b = pop; a = pop; push a % b;
FMOD: {2,1,ARITH_BC}: same as MOD only for float
AND: {2,1,ARITH_BC}: boolean and of top two stack elements
OR: {2,1,ARITH_BC}: boolean or of top two stack elements
NOT: {1,1,ARITH_BC}: boolean not of top stack element
BAND: {2,1,ARITH_BC}: bitwise and of top two stack elements
BOR: {2,1,ARITH_BC}: bitwise or of top two stack elements
BXOR: {2,1,ARITH_BC}: bitwise xor of top two stack elements
BNOT: {1,1,ARITH_BC}: bitwise not of top stack element
SFTL: {2,1,ARITH_BC}: shift left, top of stack is shift, next is value
SFTR: {2,1,ARITH_BC}: shift right, top of stack is shift, next is value
FADD: {2,1,ARITH_BC}: same as ADD but for float
FSUB: {2,1,ARITH_BC}: same as SUB but for float
FMUL: {2,1,ARITH_BC}: same as MUL but for float
FDIV: {2,1,ARITH_BC}: same as DIV but for float
FLE: {2,1,ARITH_BC}: <=
FL: {2,1,ARITH_BC}: <
FEQ: {2,1,ARITH_BC}: ==
FNE: {2,1,ARITH_BC}: !=
FGR: {2,1,ARITH_BC}: >
FGE: {2,1,ARITH_BC}: >=
#Jumps
JMP: {0,0,JUMP_BC}: jump to offeset in sa from current positon
JMZ: {1,0,JUMP_BC}: if top of stack is zero, jump, always pop and discard top of stack
JMN: {1,0,JUMP_BC}: if top of stack is non-zero, jump
FLIN: {1,1,NORMAL_BC}: cast float to int (top of stack)
INFL: {1,1,NORMAL_BC}: cast int to float (top of stack)
SAVE: {1,1,NORMAL_BC}: save top of stack to temp register without moving stack pointer
STO: {1,1,NORMAL_BC}: save top of stack to local variable without moving stack pointer
GSTO: {1,1,NORMAL_BC}: save top of stack to global variable without moving stack pointer
INC: {1,1,NORMAL_BC}: increment top of stack
DEC: {1,1,NORMAL_BC}: decrement top of stack
FINC: {1,1,NORMAL_BC}: increment top of stack
FDEC: {1,1,NORMAL_BC}: decrement top of stack
CHOOSE: {3,1,OTHER_BC}:
#builtins
ABS: {1,1,BUILTIN_BC}:
ABSF: {1,1,BUILTIN_BC}:
SIN: {1,1,BUILTIN_BC}:
COS: {1,1,BUILTIN_BC}:
TAN: {1,1,BUILTIN_BC}:
ASIN: {1,1,BUILTIN_BC}:
ACOS: {1,1,BUILTIN_BC}:
ATAN: {1,1,BUILTIN_BC}:
SQRT: {1,1,BUILTIN_BC}:
LN: {1,1,BUILTIN_BC}:
FLOOR: {1,1,BUILTIN_BC}:
CEIL: {1,1,BUILTIN_BC}:
RAND: {0,1,BUILTIN_BC}:
ATAN2: {2,1,BUILTIN_BC}:
POW: {2,1,BUILTIN_BC}:
MIN: {2,1,BUILTIN_BC}:
MAX: {2,1,BUILTIN_BC}:
MINF: {2,1,BUILTIN_BC}:
MAXF: {2,1,BUILTIN_BC}:
HYPOT: {2,1,BUILTIN_BC}:
FEQUAL: {2,1,BUILTIN_BC}:
#misc
PYES: {0,0,BUILTIN_BC}:
NONO: {0,0,OTHER_BC}:
END: {0,0,END_BC}:
HLT: {0,0,END_BC}:
DBG: {0,0,OTHER_BC}:

